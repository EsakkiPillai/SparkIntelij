fractios = nummerator / denominator

create a Fraction example ad Print it as nummerator/denominator

Collections
-------------
scala> val a = 1 to 100
a: scala.collection.immutable.Range.Inclusive = Range(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100)

scala>  1 to 50 by 10
res0: scala.collection.immutable.Range = Range(1, 11, 21, 31, 41)


get even number and get square of the number and get sum of those number

scala> var sum =0
sum: Int = 0

scala> for( e <- 2 to 20 by 2){
     |  sum =sum + (e*e)
     | }

scala>

scala> sum
res6: Int = 1540


to Write in More  Functional Way

scala> (1 to 20).filter (x => x%2 ==0).map(rec=> rec*rec)
res7: scala.collection.immutable.IndexedSeq[Int] = Vector(4, 16, 36, 64, 100, 144, 196, 256, 324, 400)

scala> (1 to 20).filter (x => x%2 ==0).map(rec=> rec*rec).reduce( (total,ele) =>total+ele)
res8: Int = 1540


here tot will be Created Globally and it will be maintained seperately 

all the above will be executed in parallel

Traversable is a trait with Functionality of common actions which means its a kind of hetrogenous element so that we can iterate


scala> val t:Traversable[Int] =  Traversable(1,2,3)
t: Traversable[Int] = List(1, 2, 3)

scala> t.
++             foldLeft             par                 take
++:            foldRight            partition           takeWhile
/:             forall               product             to
:\             foreach              reduce              toArray
WithFilter     genericBuilder       reduceLeft          toBuffer
addString      groupBy              reduceLeftOption    toIndexedSeq
aggregate      hasDefiniteSize      reduceOption        toIterable
collect        head                 reduceRight         toIterator
collectFirst   headOption           reduceRightOption   toList
companion      init                 repr                toMap
copyToArray    inits                scan                toSeq
copyToBuffer   isEmpty              scanLeft            toSet
count          isTraversableAgain   scanRight           toStream
drop           last                 seq                 toString
dropWhile      lastOption           size                toTraversable
exists         map                  slice               toVector
filter         max                  span                transpose
filterNot      maxBy                splitAt             unzip
find           min                  stringPrefix        unzip3
flatMap        minBy                sum                 view
flatten        mkString             tail                withFilter
fold           nonEmpty             tails


--------------------------------------------------------------------------------------------------------------------------------------------------
Case Class 

case class Book(title: String, pages: Int)
What is hidden behind this line of code?

1) Class with 2 immutable fields
2) Getters for the fields
3) Constructor
4) Useful methods (will talk about that later)

case class is also a Class , which has case as a additional Modifier.Because of this we have some additional Benefit as listeed belo
case class person( Fname :String )
object person {
 def setPrinter() = println("we have printer Access" )
 }

1) If we javap this class we have 2 objects one with person and another with person$ (object)
2) By default case class parameters are val , so that we can use them as p.id , we can also change the parameters to var 
3) case class will have default implementation to tostring hashcode copy equals method ,
4) we can create the object of the case class without any new key word
5) we can call the nethods available in the companion object of the case class val p = person.setPrinter()
6) we can inherit the case class from another case class , in scala one case class to another case class is prohibited . We can extend a caseclass from another class, trait etc
7) in 2.11 case class have no limitation to the parameters in previous version we have the limitation up to 22 paramaters 
8) Case class and case objects are serializable. which means it implements the serializable.
9) == you check that each value inside of the first one class equals to the value of the second one class

case class Rectangle(length: Int = 0, width: Int = 0)
 
object Rectangle {
  def square(rectangle: Rectangle) = rectangle.length * rectangle.width
}
 
val r1 = Rectangle(5, 4)
 
Rectangle.square(r1)

* By default, Scala Compiler adds companion object with apply and unapply methods that’s why we don’t need new keyword to create instances of a case class

the biggest advantage of case class is that they support pattern matching 


class Person (firstName:String)  { // Class Definition 
// Class body 
}


* A scala class can contain primary consutrucot or primary and Auxilary constructor 
* A scala class can contain only one primary constructor and one or more Auxilary constructor 
* primary constructor starts at the class definition and spans completed class body 

class Person(firstName:String, middleName:String, lastName:String){
      // Class body goes here
	  
}

val p1 = new Person("First","","Last")

Some People may have middle Name some dont we can solve the problem using Auxilarly Constructor

class Person(firstName:String, middleName:String, lastName:String){
      println("Statement 1")
 
      def fullName() = firstName + middleName + lastName
 
      println("Statement 2")
}
scala> var p1 = new Person("Ram","","Posa")
Statement 1
Statement 2
p1: Person = Person@3eb81efb

whenever we create the Object for the Class Only the Class Body statements will be executed because it became the Prmary Constructor . Methods inside the Class wont be executed
** All the Statemnets will be part of the Primary Constructor 
** Methods will not be part of the Primary Constructor 
** If else while loop also be part of the Primary Constructor 
** A method call will also be part of the Primary Constructor 

*** “val” means value that is constant. “val” is used to define Immutable Fields or variables or attributes. Immutable fields means once we create we cannot modify them.
*** “var” means variable that is NOT constant. “var” is used to define Mutable Fields or variables or attributes. Mutable fields means once we create, we can modify them.

Getter Method  	public java.lang.String firstName();
Setter Method   public void firstName_$eq(java.lang.String);
Constructor     public person( java.lang.string);


if we dont declare anything  at the time of class Creation it will treated as the constructor 
class person (firstName :String) {}
will be creating a Constructor alone public person (java.lang.String)


Auxiliary Constructor is also know as Secondary Constructor. 
A Scala class can contain zero or one or more Auxiliary Constructors
 Auxiliary Constructors are used to provide Constructors Overloading.
 
we define Auxiliary Constructor in Class body with def and this keyword 
each Auxiliary Constructor should call the Previous defined Constructor . 
It may call the Primary Constructor or the any other Auxiliary Constructor 
 Like Methods, Auxiliary Constructors are defined by using “def” keyword.
Like Method Overloading, All Auxiliary Constructors should use same name: “this”.
Each Auxiliary Constructor must have a different signature i.e. Different Parameters list.
Each Auxiliary Constructor must call a previously defined constructor: it may be either Primary Constructor or Auxiliary Constructors. This call should be first statement in that Constructor.
One Auxiliary Constructor calls Primary Constructor or another Auxiliary constructors by using “this” name.
 
 
 
 ========================================================================================================================================
 Methods are Defined inside the Classes and Functions can be declared Any where . Functions wont Operate on Objects 
 
 
 def abs (x:Double) = { 
	if (x >0) x else -x
 }
 
 def is the Keyword  and it is followed by the function Name 
 x is the input parameter and we declare x is an Double   in Java we write Double x in scala we wrie the quite Opposite 
 in here we dont specify the return type because return type is inferred... values are returned to the function call 
 in the aboe we didnt specify the Output data type since scala automatically infer the data type , as Double 
 
 if we declare the Function in the recursive manner we need to specify the data type  explicitly
 def fact(n:Int):Int ={
	if(i <=1) 1 
	else i*fact(i-1)
	}
	
 if we dont give the equals in the Function it will be treated as the unit Function in here it will only excute the expression and returns nothing/ unit 
 
  def border (s:String ) {
 val border = "--" * s.length+"--"
 println(border+ "|\n" + s + "|\n"
 }
 
 Named Default Arguments 
 
 while Creating the Function if we declare the Arguments with Parameters it will take that as the default parameter 
 
 def decorate (s: String , left:String ="[" ,right:String = "]") {
		left+ s +right + 
	}
decorate("hello")             //[Hello]
decorate("hello" , "@" ,"!")  //@Hello!
decorate("Hello" , "$" )     // $Hello]	

if we are not specifying the left or right parameter values default parameters value will get executed as above 

named Arguments - while at the Time of Function call if we specify the values with the named Parameters we can call the Function irrespective of its position 

decorate( right = "#" ,left="$" ,s="Hello" )    // $Hello#

--------------------------------------------------------------------------------------------------------------------

import Scala.io.Source

val stream :IputStream = getClass.getResourceAsStream("/readme.txt")
val inp = scala.io.Source.fromInputStream(stream).getLines
inp.foreach(println)

val stream :InputStream = getClass.getResourceAsStream("readme.txt")
val path = stream.getPath
println(path)

import java.io.file
val stream:InputPath = getClass.getResourceAsStream("readme.txt")
val folder = new File(stream.getPath)
if( folder.exists && folder.isDirectory)
	folder.listFiles.toList.foreach( x => println(x.getName))


For Working With Files 
libraryDependencies += "com.github.pathikrit" %% "better-files" % "2.16.0"


---------------------------------------------------------------------------------------------------------------

Reading a File 

scala> src.split("\\s+")
res8: Array[String] = Array(JournalDev, is, a, great, platform, for, Java, Developers., JournalDev, is, online, log, of, Pankaj, Kumar.)

scala> src.split("\\s+").groupBy (x=>x)
res7: scala.collection.immutable.Map[String,Array[String]] = Map(for -> Array(for), is -> Array(is, is), Kumar. -> Array(Kumar.), Pankaj -> Array(Pankaj), online -> Array(online), a -> Array(a), Developers. -> Array(Developers.), JournalDev -> Array(JournalDev, JournalDev), platform -> Array(platform), Java -> Array(Java), great -> Array(great), of -> Array(of), log -> Array(log))

scala> src.split("\\s+").groupBy (x=>x).mapValues( x => (x,x.length))
res9: scala.collection.immutable.Map[String,(Array[String], Int)] = Map(for -> (Array(for),1), is -> (Array(is, is),2), Kumar. -> (Array(Kumar.),1), Pankaj -> (Array(Pankaj),1), online -> (Array(online),1), a -> (Array(a),1), Developers. -> (Array(Developers.),1), JournalDev -> (Array(JournalDev, JournalDev),2), platform -> (Array(platform),1), Java -> (Array(Java),1), great -> (Array(great),1), of -> (Array(of),1), log -> (Array(log),1))	

import scala.io.Source._

val src = Source.fromFile("/home/esakkipillai/data.txt")            // Non Empty Iterator 
val src = Source.fromFile("/home/esakkipillai/data.txt").mkString   // Return as String
src.split("//s+").groupBy( x=>x ).mapValues( x =>  x.length)


writing to a File 
val writer = new PrintWriter(new File("/home/esakkipillai/scala_examples/Dataer.txt"))
writer.write("Hello ..Guys ")
writer.close()
Source.fromFile("/home/esakkipillai/scala_examples/Dataer.txt").foreach(print)


----------------------------------------------------------------------------------------------------------------------------------------------------
Acess Modifiers 

By Default Access Modifier is Public by default 


Modifier	Class	Package	Subclass	Every class
public	    Yes		 Yes		Yes			Yes
protected	Yes		 No			Yes			No
private		Yes		 No			No			No

------------------------------------------------------------------------------------------------------------------------------------------------------
Exception Handling 

Scala Doesnt support the Checked Exception 
	1) Throwing an Exception  ===> throws new Airthmetic Exception 
	2) Try Catch Blocks ====> try { 
									val a = 4/0
								 } catch {
										case ex: Arithmentic Exception => println (" We are getting the Airthemetic Exception")
										case _ => Println("We got some Exception ")
										}
										
=============================================================================================================================================================
Collections 



List 
-----

1) Find the max and Min values from the List 
		a) Use predefined Method 
		B) Use normal for loop 
		
2) we have a List of Person object and we need to display with the title name age  ( Mr Esak 12 Ms rai 12 )  
		the person object looks as below Class Person( name , sex  , age ) and 
		
3)  // Check how to implict ordering for a custom class ?

4) Write a Custom Logic for Sorting ?

5)
------------------------------------------------------------------------------------------------------------------------

scala Collections mutable and immutable

elements in the mutable will be updated eventhough it is val or var

LIST is IMMUTABLE we cant update it.

scala> val a = Array(1,2,3,4,5)
a: Array[Int] = Array(1, 2, 3, 4, 5)

scala> a(0)
res0: Int = 1

scala> a(0) =100

scala> a
res2: Array[Int] = Array(100, 2, 3, 4, 5)


we didnt  leave val concept we cant assign any newArray to the value a 

scala> a= Array(3,5,6,7)
<console>:12: error: reassignment to val
       a= Array(3,5,6,7)
        ^

scala>

class such as Array Vector implements the IndexedSeq and class such as List implements Linearseq

Plesae check the  types
scala> val a = List ( "Esak" ,"sankar","eskki" ,"Rocho")
a: List[String] = List(Esak, sankar, eskki, Rocho)

scala> val a1  = List ( 1,68457,3.5 ,"esakki","CG")
a1: List[Any] = List(1, 68457, 3.5, esakki, CG)

its because of class hierarchy

Reduce will work in parallel reduceLeft will work in sequential


Cehck Min and Max using Reduce

get the count of completed orders 

os.filter(x=> x.orderStatus =="COMPLETE").length

scala> case class orders( f:Int , status:String )
defined class orders

scala> val os = List (
     | orders(1,"COMPLETED"),
     | orders(2,"COMPLETED") ,
     | orders(3,"CLOSED")
     | )
os: List[orders] = List(orders(1,COMPLETED), orders(2,COMPLETED), orders(3,CLOSED))

scala> os.reduce((len,ele) => len+1)
<console>:15: error: type mismatch;
 found   : Int(1)
 required: String
       os.reduce((len,ele) => len+1)
 
 In Here we cant add the integer to the Orders (len) so thats y we get the above error                               ^
 so we have to change it to int  and then we need to add it 

scala> os.filter( p => p.status =="COMPLETED").map(f => 1).reduce ((len,ele) => len+1)
res3: Int = 2

scala> os.filter( p => p.status =="COMPLETED").map(f => 1)
res4: List[Int] = List(1, 1)

 


varargs

def sum(x:Int*) = {
	var result =0
	for( rg <- args ) result +=rg
	result
	}

sum(1,2,3,45)

if i put 
sum(1 to 10) 
it will throw some error inorder to overcome that we are using :_*

so sum ( 1to10 :_*) which will tell consider this as sequence of Something

we need this for recursive type of functions 

def sumrev ( x :Int*) = {
	if(x.length==0) 0
	else x.head + sumrev(x.tail :_*)
	}




get the Vowels from the String 

if we found a vowel give it back to me 


def vowelsyield(str:String) =
    for (x <-str if isvowel3(x) ) yield x

	this above  lines will do the trick for us 
IN JAVE/ SCALA  we have to use the below code 

def vowels(s:String) = {
  val str = s.toLowerCase()
  var result:String = " "
  for( x <- str)  {
    if (isvowel3(x) )
      result += x
  }
  result
}

 
 
 ===================================================================================================================================================================
 
 
 Arrays
 
 val a = new Array[Int] (10)  ten integers will be created as of zero values 
 
 
 val a = new Array("Helli" ,"World")   // it will be type infered automatically to Strings 
 
 we use parantheses to access the values a(4)
 
 To traverse the array  we have to use the for loop 
 
 for( elemnet <- a)

 1 to 5  1 2 3 4 5
 1 until 5 1 2 3 4
 
 
 
 
 Scala arrays are mapped to java array in VM  when we have array (Int) it will be transformed into the int[] primitive type of java 
 
 Once an array have been declared we can change the size of the Array 
 but in scala we can change the length of the array 
	
		Array Buffer 
		import scala.collection.mutable.arrayBuffer
		vl b = new ArrayBuffer[Int]
 
In Scala we mormally transform one array into Another 
 
 Map is a Collection of pairs ("alice" ,11)
 
 for yield will have the dame data type as of it iterates 
 
 
 
 
 
 Array Collects the value of same type but Tuples co;;ect the vales of different types
 
 access the element from the tuples 
 
 tup._1
 
 another best approach is 
 
val (_ , sec , thr) = tup      sec: Double = 1.23 thr: String = Esak    // here we are ignoring the first tuple valus 
 
 





==============================================================================================================================================================

classes in scala 

syntax

class point (val x:Double,val y :Double){

  def move (dx:Double ,dy:Double) = new point(x+dx , y+dy )
  def distanceFromOrigin =  math.sqrt(x*x + y*y)
  override def toString = f"${x} ,${y}"
}

val p = new point(3,4)  //Tis get printed by the toString Method  p: point = 3.0 ,4.0
p.move(10,20)  //res0: point = 13.0 ,24.0
p.distanceFromOrigin
p.x    //3.0
p.y    //res3: Double = 4.0


it has 3 methods move ,distanceFromOrigin ,toString
it has 2 instance varaiables x , y
	
the toString method is overriden from the base class. we ahve to use the keyword as override as above
all the scala class are extend java.lang object which has a toString method


if the method doesnt take any parantheses we dont need to give the parantheses in mtod calling or metod definition

	p.distanceFromOrigin       => user doesn't understood whether its a method or variables

the instance variable can be accessed inside the class

p.x
p.y

since p.x is val we can't mutate it means we can't reassign variables to it.
 p.x  and p.y are used to read the results not to mutate it


if we want mutable variable we have to declare it as  var 

class point(var x:Double , var y:Double)

now we can change the values to p.x 

there are also private val and var variables

class bankaccount {

private var balance =0.0
}

-----------------------
Lets consider the  below class 

class point (val x :Double ,val y :Double) {

	def this() { this(0,0) }
	----
	}
	
from the above statemet we have two constructor
primary  => Any Variable we are define inside the parantheses became the constructor
auxillary =>  we can have n of auxiliary constructor it should have the name of this and it should call   
 	

class point (val x:Double,val y :Double){

  println("Welcometo the Point(%f,%f)".format(x,y))
  .....
  
  }
  
  when ever we create it the message will get printed. so if we need any  additional work to be done we have toinclude it in the class body 
  
  
 Point  class equivalent java classes are as below
scala> :javap -p point
Compiled from "<console>"
public class point {
  private final double x;                  we decalre the variable x as val 
  private final double y;
  public double x();                       getter metod for variable x 
  public double y();
  public point move(double, double);        user created "move" metod
  public double distanceFromOrigin();       user created method
  public java.lang.String toString();        toString Method
  public point(double, double);             constructor
  
}


point class with auxiliary constructor


scala> class point (val x:Double,val y :Double){
     |   def this() { this(0,0)}
     |   println("Welcometo the Point(%f,%f)".format(x,y))
     |   def move (dx:Double ,dy:Double) = new point(x+dx , y+dy )
     |   def distanceFromOrigin =  math.sqrt(x*x + y*y)
     |   override def toString = f"${x} ,${y}"
     | }
defined class point

scala> :javap -p point
Compiled from "<console>"
public class point {
  private final double x;
  private final double y;
  public double x();
  public double y();
  public point move(double, double);
  public double distanceFromOrigin();
  public java.lang.String toString();
  public point(double, double);
  public point();
}





how come p.x and p.distanceFromOrigin differs with each other?

we dont know whether x is a variable or metod .
 this is called uniform access  , class user doesnt care about it
 
 
infix Notation
	x op y is same as of x.op(y)
	
1 to 10 map (3 * _ ) filter (_ % 5 ==2)  is same as of (1 to 10).map (3 * _ ).filter (_ % 5 ==2)

operator ends with : are right associtives 

1 :: 2 :: 3 :: Nil => which means ( 1:: (2  :: (3 :: Nil))) = > First nill then 3 ten 2 ten 1 will be added


Objects and  Companinion Objects 

val a = List (1,2,3) 
we are actually calling the List without new Keyword how ?

List class will have a companinion object as of same name and a apply metod.

Companinion objects will ave the same name as of the object name . they can access each other

if we use companinion object and apply  method we can call the class without using the new Keyword . 
  



 
















